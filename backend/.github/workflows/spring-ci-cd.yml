name: Spring Boot CI/CD Pipeline

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: minimart
          POSTGRES_USER: yogen
          POSTGRES_PASSWORD: dat@123
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/org/example
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build and test with Maven
        run: |
          mvn clean package
        env:
          JDBC_URL: jdbc:postgresql://localhost:5432/minimart?user=yogen&password=dat@123
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/minimart?user=yogen&password=dat@123
          s3_accessKey: randomAccessKey
          s3_region: randomRegion
          s3_bucketName: randomBucketName
          s3_secretKey: randomSecretKey

      - name: Verify Maven build artifacts
        run: |
          echo "Listing contents of target/"
          ls -l target/
          echo "Verifying JAR file presence"
          ls -l target/*.jar

  deploy:
    needs: test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup enviornment variables
        run: |
          echo "JDBC_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "s3_accessKey=${{ secrets.S3_ACCESSKEY }}" >> $GITHUB_ENV
          echo "s3_region=${{ secrets.S3_REGION }}" >> $GITHUB_ENV
          echo "s3_bucketName=${{ secrets.S3_BUCKETNAME }}" >> $GITHUB_ENV
          echo "s3_secretKey=${{ secrets.S3_SECRETKEY }}" >> $GITHUB_ENV


      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'


      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/org/example
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build with Maven
        run: mvn clean package
        env:
          s3_accessKey: ${{ secrets.S3_ACCESSKEY }}
          s3_region: ${{ secrets.S3_REGION }}
          s3_bucketName: ${{ secrets.S3_BUCKETNAME }}
          s3_secretKey: ${{ secrets.S3_SECRETKEY }}


      - name: Heroku Container Registry Login
        run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Install tree
        run: sudo apt-get update && sudo apt-get install tree

      - name: Copy jar
        run: |
          cp target/*.jar .

      - name: List build artifacts
        run: tree .

      - name: Build Docker Image
        run: docker build -t my-app -f Dockerfile .

      - name: Tag Image
        run: docker tag my-app registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Push to Heroku
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Release Image on Heroku
        run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          s3_accessKey: ${{ secrets.S3_ACCESSKEY }}
          s3_region: ${{ secrets.S3_REGION }}
          s3_bucketName: ${{ secrets.S3_BUCKETNAME }}
          s3_secretKey: ${{ secrets.S3_SECRETKEY }}
